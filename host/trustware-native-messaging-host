#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.

import struct
import sys
import threading
import Queue

import json

import urllib
import urllib2

import os
import signal
import subprocess
import time

try:
  import Tkinter
  import tkMessageBox
except ImportError:
  Tkinter = None

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
  import os, msvcrt
  msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
  msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

# Helper function that sends a message to the webapp.
def send_message(message):
  # Write message size.
  sys.stdout.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

# Thread that reads messages from the webapp.
def read_thread_func(queue):
  message_number = 0
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      if queue:
        queue.put(None)
      sys.exit(0)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length).decode('utf-8')

    if queue:
      queue.put(text)
    else:
      # In headless mode just send an echo message back.
      send_message('{"echo": %s}' % text)

if Tkinter:
  class NativeMessagingWindow(Tkinter.Frame):
    def __init__(self, queue):
      self.queue = queue

      Tkinter.Frame.__init__(self)
      self.pack()

      self.text = Tkinter.Text(self)
      self.text.grid(row=0, column=0, padx=10, pady=10, columnspan=2)
      self.text.config(state=Tkinter.DISABLED, height=10, width=40)

      self.messageContent = Tkinter.StringVar()
      self.sendEntry = Tkinter.Entry(self, text="token:", textvariable=self.messageContent)
      self.sendEntry.grid(row=1, column=0, padx=10, pady=10)

      self.urlContent = Tkinter.StringVar()
      self.urlEntry = Tkinter.Entry(self, text="url:", textvariable=self.urlContent)
      self.urlEntry.grid(row=2, column=0, padx=10, pady=10)

      self.sendButton = Tkinter.Button(self, text="Send", command=self.onSend)
      self.sendButton.grid(row=1, column=1, padx=10, pady=10)

      self.sendButton = Tkinter.Button(self, text="Bluetooth", command=self.sendBluetoothDevices)
      self.sendButton.grid(row=2, column=1, padx=10, pady=10)

      self.after(100, self.processMessages)

    def processMessages(self):
      while not self.queue.empty():
        message = self.queue.get_nowait()
        if message == None:
          self.quit()
          return

        self.log("Received %s" % message)

        json_message = json.loads(message.replace("'", "\""))

        # send my device
        self.onSend(json_message['token'], json_message['url'])

        # send surrounding devices
        devicelist = self.getBluetooth()
        self.log("num Bluetooth devices: %s" % len(devicelist))
        for device in devicelist:
          self.log("Bluetooth device: %s" % device[0])
          self.onSend(json_message['token'], json_message['url'], device[0], device[1])

      self.after(100, self.processMessages)

    def shellCmdToFile(self, command, duration, nameOut, nameErr):
      # Run shell command with output piped to file
      fileOut = open(nameOut, 'w')
      fileErr = open(nameErr, 'w')
      process = subprocess.Popen(command.split(), stdout=fileOut, stderr=fileErr)

      # Terminate process after x seconds and wait a moment to write output files
      time.sleep(duration)
      try:
        process.send_signal(signal.SIGINT)
      except OSError as e:
        pass
      time.sleep(0.5)
      fileOut.close()
      fileErr.close()

    def sendBluetoothDevices(self):
      json_message = {'token': 'test1', 'url': 'https://gotdevices.herokuapp.com/api/devicecheck'}
      # send surrounding devices
      devicelist = self.getBluetooth()
      self.log("num Bluetooth devices: %s" % len(devicelist))
      for device in devicelist:
        self.log("Bluetooth device: %s" % device[0])
        self.onSend(json_message['token'], json_message['url'], device[0], device[1])

    def getBluetooth(self):
      # Run Bluetooth LE scan tool and write output to file
      print 'Scanning BTLE...'
      self.shellCmdToFile('hcitool lescan', 3, '.scanOutput', '.scanErr')

      # Read output and remove temp files
      with open('.scanOutput', 'r') as fileOut:
        linesOut = fileOut.readlines()
      with open('.scanErr', 'r') as fileErr:
        linesErr = fileErr.readlines()
      #os.remove('.scanOutput')
      os.remove('.scanErr')


      # Try to catch common problems
      if len(linesErr) > 0:
        if linesErr[0] == 'Set scan parameters failed: Operation not permitted\n':
          self.log('BTLE scanning failed; did you run this script as root?')
          print 'BTLE scanning failed; did you run this script as root?'
          return
        if linesErr[0] == 'Set scan parameters failed: Input/output error\n':
          self.log('BTLE scanning failed; trying restarting the local hardware device')

          print 'BTLE scanning failed; trying restarting the local hardware device'
          return
        if len(linesOut) == 0:
          self.log('BTLE scanning failed; unknown')

          print 'BTLE scanning failed for an unknown reason. Error log:'
          for line in linesErr:
            print line
          return

      # Parse scan output. Each device is a tuple (hardware address, name)
      devices = []
      for line in linesOut[1:]:
        parts = line.split(' ')
        if len(parts) != 2 or len(parts[1]) < 14:
          continue
        devices.append((parts[0], parts[1][:-1]))

      # Identify valid Trustware devices. Valid device data consists of three
      # concatenated strings: TOTP (6 chars), UID (8 chars), company URL (12 chars).
      # Result is a list of tuples (UID, TOTP, company URL)
      trustWareDevices = []
      for device in devices:
        totp = device[1][:6]
        uid = device[1][6:14]
        url = device[1][14:]
        if not totp.isdigit() or not totp.isdigit():
          continue
        trustWareDevices.append((uid, totp, url))
      
      return trustWareDevices

    def getTOTP(self):
      otp = 0
      location = '/dev/otp'
      try:
        f = open(location, 'r')
        otp = f.read()
      except:
        tkMessageBox.showinfo('Native Messaging', 'problem reading'+location)
      return otp

    def onSend(self, _token=None, _url=None, _uid=None, _otp=None):
      # Set default values
      if not _token:
        token = self.messageContent.get()
      if not _url:
        url = self.urlContent.get()
      if not _uid:
        _uid = 48216136
      if not _otp:
        _otp = self.getTOTP()

      data = urllib.urlencode({'uid': _uid ,'otp': _otp, 'token': _token, 'url': _url})
      self.log('Sending %s' % data)

      try:
        # mock manufacture service
        url = "http://eecs588-auth.herokuapp.com/authenticate" 
        r = urllib2.Request(url, data)
        response = urllib2.urlopen(r)

      except IOError as e:
        tkMessageBox.showinfo('Native Messaging', 'Failed to send to Manufacture.')

    def log(self, message):
      self.text.config(state=Tkinter.NORMAL)
      self.text.insert(Tkinter.END, message + "\n")
      self.text.config(state=Tkinter.DISABLED)


def Main():
  if not Tkinter:
    send_message('"Tkinter python module wasn\'t found. Running in headless ' +
                 'mode. Please consider installing Tkinter."')
    read_thread_func(None)
    sys.exit(0)

  queue = Queue.Queue()

  main_window = NativeMessagingWindow(queue)
  main_window.master.title('Device Info to Manufacturer')

  thread = threading.Thread(target=read_thread_func, args=(queue,))
  thread.daemon = True
  thread.start()

  main_window.mainloop()

  sys.exit(0)


if __name__ == '__main__':
  Main()
